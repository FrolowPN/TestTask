//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorklistAssistant.WAService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Worklist", Namespace="http://schemas.datacontract.org/2004/07/WAService")]
    [System.SerializableAttribute()]
    public partial class Worklist : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MasterUserLoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusImgField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountR {
            get {
                return this.CountRField;
            }
            set {
                if ((object.ReferenceEquals(this.CountRField, value) != true)) {
                    this.CountRField = value;
                    this.RaisePropertyChanged("CountR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountS {
            get {
                return this.CountSField;
            }
            set {
                if ((object.ReferenceEquals(this.CountSField, value) != true)) {
                    this.CountSField = value;
                    this.RaisePropertyChanged("CountS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountU {
            get {
                return this.CountUField;
            }
            set {
                if ((object.ReferenceEquals(this.CountUField, value) != true)) {
                    this.CountUField = value;
                    this.RaisePropertyChanged("CountU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoginUser {
            get {
                return this.LoginUserField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginUserField, value) != true)) {
                    this.LoginUserField = value;
                    this.RaisePropertyChanged("LoginUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MasterUserLogin {
            get {
                return this.MasterUserLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.MasterUserLoginField, value) != true)) {
                    this.MasterUserLoginField = value;
                    this.RaisePropertyChanged("MasterUserLogin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordUser {
            get {
                return this.PasswordUserField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordUserField, value) != true)) {
                    this.PasswordUserField = value;
                    this.RaisePropertyChanged("PasswordUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusImg {
            get {
                return this.StatusImgField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusImgField, value) != true)) {
                    this.StatusImgField = value;
                    this.RaisePropertyChanged("StatusImg");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WAService.IWAService")]
    public interface IWAService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/VerifyingPassword", ReplyAction="http://tempuri.org/IWAService/VerifyingPasswordResponse")]
        bool VerifyingPassword(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/VerifyingPassword", ReplyAction="http://tempuri.org/IWAService/VerifyingPasswordResponse")]
        System.Threading.Tasks.Task<bool> VerifyingPasswordAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/AddUserInFile", ReplyAction="http://tempuri.org/IWAService/AddUserInFileResponse")]
        bool AddUserInFile(string nameUser, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/AddUserInFile", ReplyAction="http://tempuri.org/IWAService/AddUserInFileResponse")]
        System.Threading.Tasks.Task<bool> AddUserInFileAsync(string nameUser, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/GetWorklistsForUser", ReplyAction="http://tempuri.org/IWAService/GetWorklistsForUserResponse")]
        WorklistAssistant.WAService.Worklist[] GetWorklistsForUser(string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/GetWorklistsForUser", ReplyAction="http://tempuri.org/IWAService/GetWorklistsForUserResponse")]
        System.Threading.Tasks.Task<WorklistAssistant.WAService.Worklist[]> GetWorklistsForUserAsync(string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/AddWorklistInFile", ReplyAction="http://tempuri.org/IWAService/AddWorklistInFileResponse")]
        bool AddWorklistInFile(string masterUserLogin, string loginUser, string passwordUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/AddWorklistInFile", ReplyAction="http://tempuri.org/IWAService/AddWorklistInFileResponse")]
        System.Threading.Tasks.Task<bool> AddWorklistInFileAsync(string masterUserLogin, string loginUser, string passwordUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/DeleteWorklistFromFile", ReplyAction="http://tempuri.org/IWAService/DeleteWorklistFromFileResponse")]
        bool DeleteWorklistFromFile(string masterUserLogin, string loginUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/DeleteWorklistFromFile", ReplyAction="http://tempuri.org/IWAService/DeleteWorklistFromFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteWorklistFromFileAsync(string masterUserLogin, string loginUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/EditWorklist", ReplyAction="http://tempuri.org/IWAService/EditWorklistResponse")]
        void EditWorklist(string masterUserLogin, string oldUserLogin, string newUserLogin, string newUserPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/EditWorklist", ReplyAction="http://tempuri.org/IWAService/EditWorklistResponse")]
        System.Threading.Tasks.Task EditWorklistAsync(string masterUserLogin, string oldUserLogin, string newUserLogin, string newUserPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/EditUser", ReplyAction="http://tempuri.org/IWAService/EditUserResponse")]
        bool EditUser(string userLogin, string newUserLogin, string newUserPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/EditUser", ReplyAction="http://tempuri.org/IWAService/EditUserResponse")]
        System.Threading.Tasks.Task<bool> EditUserAsync(string userLogin, string newUserLogin, string newUserPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/ChangeMasterUserForWorklists", ReplyAction="http://tempuri.org/IWAService/ChangeMasterUserForWorklistsResponse")]
        void ChangeMasterUserForWorklists(string oldMasterUser, string newMasterUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/ChangeMasterUserForWorklists", ReplyAction="http://tempuri.org/IWAService/ChangeMasterUserForWorklistsResponse")]
        System.Threading.Tasks.Task ChangeMasterUserForWorklistsAsync(string oldMasterUser, string newMasterUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/DeleteAllWorklistForUser", ReplyAction="http://tempuri.org/IWAService/DeleteAllWorklistForUserResponse")]
        bool DeleteAllWorklistForUser(string masterUserLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/DeleteAllWorklistForUser", ReplyAction="http://tempuri.org/IWAService/DeleteAllWorklistForUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteAllWorklistForUserAsync(string masterUserLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/DeleteUserFromFile", ReplyAction="http://tempuri.org/IWAService/DeleteUserFromFileResponse")]
        bool DeleteUserFromFile(string nameUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWAService/DeleteUserFromFile", ReplyAction="http://tempuri.org/IWAService/DeleteUserFromFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserFromFileAsync(string nameUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWAServiceChannel : WorklistAssistant.WAService.IWAService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WAServiceClient : System.ServiceModel.ClientBase<WorklistAssistant.WAService.IWAService>, WorklistAssistant.WAService.IWAService {
        
        public WAServiceClient() {
        }
        
        public WAServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WAServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WAServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WAServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool VerifyingPassword(string userName, string password) {
            return base.Channel.VerifyingPassword(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyingPasswordAsync(string userName, string password) {
            return base.Channel.VerifyingPasswordAsync(userName, password);
        }
        
        public bool AddUserInFile(string nameUser, string password) {
            return base.Channel.AddUserInFile(nameUser, password);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserInFileAsync(string nameUser, string password) {
            return base.Channel.AddUserInFileAsync(nameUser, password);
        }
        
        public WorklistAssistant.WAService.Worklist[] GetWorklistsForUser(string userLogin) {
            return base.Channel.GetWorklistsForUser(userLogin);
        }
        
        public System.Threading.Tasks.Task<WorklistAssistant.WAService.Worklist[]> GetWorklistsForUserAsync(string userLogin) {
            return base.Channel.GetWorklistsForUserAsync(userLogin);
        }
        
        public bool AddWorklistInFile(string masterUserLogin, string loginUser, string passwordUser) {
            return base.Channel.AddWorklistInFile(masterUserLogin, loginUser, passwordUser);
        }
        
        public System.Threading.Tasks.Task<bool> AddWorklistInFileAsync(string masterUserLogin, string loginUser, string passwordUser) {
            return base.Channel.AddWorklistInFileAsync(masterUserLogin, loginUser, passwordUser);
        }
        
        public bool DeleteWorklistFromFile(string masterUserLogin, string loginUser) {
            return base.Channel.DeleteWorklistFromFile(masterUserLogin, loginUser);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteWorklistFromFileAsync(string masterUserLogin, string loginUser) {
            return base.Channel.DeleteWorklistFromFileAsync(masterUserLogin, loginUser);
        }
        
        public void EditWorklist(string masterUserLogin, string oldUserLogin, string newUserLogin, string newUserPassword) {
            base.Channel.EditWorklist(masterUserLogin, oldUserLogin, newUserLogin, newUserPassword);
        }
        
        public System.Threading.Tasks.Task EditWorklistAsync(string masterUserLogin, string oldUserLogin, string newUserLogin, string newUserPassword) {
            return base.Channel.EditWorklistAsync(masterUserLogin, oldUserLogin, newUserLogin, newUserPassword);
        }
        
        public bool EditUser(string userLogin, string newUserLogin, string newUserPassword) {
            return base.Channel.EditUser(userLogin, newUserLogin, newUserPassword);
        }
        
        public System.Threading.Tasks.Task<bool> EditUserAsync(string userLogin, string newUserLogin, string newUserPassword) {
            return base.Channel.EditUserAsync(userLogin, newUserLogin, newUserPassword);
        }
        
        public void ChangeMasterUserForWorklists(string oldMasterUser, string newMasterUser) {
            base.Channel.ChangeMasterUserForWorklists(oldMasterUser, newMasterUser);
        }
        
        public System.Threading.Tasks.Task ChangeMasterUserForWorklistsAsync(string oldMasterUser, string newMasterUser) {
            return base.Channel.ChangeMasterUserForWorklistsAsync(oldMasterUser, newMasterUser);
        }
        
        public bool DeleteAllWorklistForUser(string masterUserLogin) {
            return base.Channel.DeleteAllWorklistForUser(masterUserLogin);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAllWorklistForUserAsync(string masterUserLogin) {
            return base.Channel.DeleteAllWorklistForUserAsync(masterUserLogin);
        }
        
        public bool DeleteUserFromFile(string nameUser) {
            return base.Channel.DeleteUserFromFile(nameUser);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserFromFileAsync(string nameUser) {
            return base.Channel.DeleteUserFromFileAsync(nameUser);
        }
    }
}
